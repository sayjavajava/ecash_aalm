<?php
/**
 * This is a rarely run script that compares balances generated by 
 * fetch_schedule/analyze_schedule and Fetch_Balance_Information.
 */
require_once(dirname(__FILE__)."/../www/config.php");
define('CUSTOMER_LIB', BASE_DIR . "customer_lib/clk/");
require_once(SQL_LIB_DIR . "scheduling.func.php");
require_once(SQL_LIB_DIR . "get_mysqli.func.php");
require_once(COMMON_LIB_DIR . "pay_date_calc.3.php");

$mysqli = get_mysqli();

$balances = Fetch_All_Balances($mysqli);
$count = $balances->Row_Count();

$i = 0;
while ($app_row = $balances->Fetch_Object_Row()) {
	$i++;
	try {
		Analyze_Balance_Row($app_row);
	} catch (BalanceException $e) {
		echo "{$e->getMessage()}\n";
	}
	
	if (!$i % 100) {
		echo $i / $count, "%\n";
	}
}


function Fetch_All_Balances($mysqli) {
	$fetch_balance_query = "
		SELECT
			ea.application_id,
		    SUM( IF( eat.name_short = 'principal' AND tr.transaction_status = 'complete', ea.amount, 0)) principal_balance,
		    SUM( IF( eat.name_short = 'service_charge' AND tr.transaction_status = 'complete', ea.amount, 0)) service_charge_balance,
		    SUM( IF( eat.name_short = 'fee' AND tr.transaction_status = 'complete', ea.amount, 0)) fee_balance,
		    SUM( IF( eat.name_short = 'irrecoverable' AND tr.transaction_status = 'complete', ea.amount, 0)) irrecoverable_balance,
		    SUM( IF( eat.name_short <> 'irrecoverable' AND tr.transaction_status = 'complete', ea.amount, 0)) total_balance,
		    SUM( IF( eat.name_short = 'principal' AND tr.transaction_status IN ('complete', 'pending'), ea.amount, 0)) principal_pending,
		    SUM( IF( eat.name_short = 'service_charge' AND tr.transaction_status IN ('complete', 'pending'), ea.amount, 0)) service_charge_pending,
		    SUM( IF( eat.name_short = 'fee' AND tr.transaction_status IN ('complete', 'pending'), ea.amount, 0)) fee_pending,
		    SUM( IF( eat.name_short = 'irrecoverable' AND tr.transaction_status IN ('complete', 'pending'), ea.amount, 0)) irrecoverable_pending,
		    SUM( IF( eat.name_short <> 'irrecoverable' AND tr.transaction_status IN ('complete', 'pending'), ea.amount, 0)) total_pending,
		    SUM( IF( eat.name_short = 'principal' AND tr.transaction_status = 'pending', ea.amount, 0)) sum_principal_pending,
		    SUM( IF( eat.name_short = 'service_charge' AND tr.transaction_status = 'pending', ea.amount, 0)) sum_service_charge_pending,
		    SUM( IF( eat.name_short = 'fee' AND tr.transaction_status = 'pending', ea.amount, 0)) sum_fee_pending,
		    SUM( IF( eat.name_short = 'irrecoverable' AND tr.transaction_status = 'pending', ea.amount, 0)) sum_irrecoverable_pending,
		    SUM( IF( eat.name_short <> 'irrecoverable' AND tr.transaction_status = 'pending', ea.amount, 0)) sum_total_pending
		  FROM
			event_amount ea
			JOIN event_amount_type eat USING (event_amount_type_id)
			JOIN transaction_register tr USING(transaction_register_id)
		  GROUP BY ea.application_id
	";
	
	$result = $mysqli->Query($fetch_balance_query);
	
	return $result;
}

function Get_Analyzed_Schedule($application_id) {
	return Analyze_Schedule(Fetch_Schedule($application_id));
}

function Analyze_Balance_Row($row) {
	$status = Get_Analyzed_Schedule($row->application_id);
	
	$balance_checks = array(
		'pending principal' => array($row->principal_pending, $status->posted_and_pending_principal),
		'pending fees' => array($row->fee_pending + $row->service_charge_pending, $status->posted_and_pending_fees),
		'pending total' => array($row->total_pending, $status->posted_and_pending_total),
		'pending principal sum' => array($row->sum_principal_pending, $status->pending_principal),
		'pending fees sum' => array($row->sum_fee_pending + $row->sum_service_charge_pending, $status->pending_fees),
		'pending total sum' => array($row->sum_total_pending, $status->pending_total),
	);
	
	foreach ($balance_checks as $name => $checks) {
		if (round($checks[0], 2) != round($checks[1], 2)) {
			throw new BalanceException($row->application_id, $name, round($checks[0], 2), round($checks[1], 2));
		}
	}
}

class BalanceException extends Exception {
	public function __construct($application_id, $balance_type, $expected_value, $actual_value) {
		parent::__construct("{$balance_type} balance for {$application_id} does not match: \${$actual_value} != \${$expected_value}");
	}
}
?>